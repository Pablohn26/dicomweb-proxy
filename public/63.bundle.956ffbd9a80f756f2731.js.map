{"version":3,"file":"63.bundle.956ffbd9a80f756f2731.js","mappings":"4PAGQA,EAA0CC,IAAAA,sC,6vBCDlD,IAAMC,EAAqB,CACzBC,MAAO,CAACC,IAAAA,kBAA2BA,IAAAA,oBACnCC,YAAa,CACXD,IAAAA,kBACAA,IAAAA,kBACAA,IAAAA,WACAA,IAAAA,UACAA,IAAAA,gBACAA,IAAAA,kBACAA,IAAAA,cACAA,IAAAA,kBAEFE,MAAO,CACLF,IAAAA,QACAA,IAAAA,SACAA,IAAAA,SACAA,IAAAA,eACAA,IAAAA,YACAA,IAAAA,gBACAA,IAAAA,0BACAA,IAAAA,c,+pCCLJ,IAAQG,EAAeC,EAAAA,GAAAA,WAQrBC,EAIER,IAAAA,kBAHFS,EAGET,IAAAA,kBAFFU,EAEEV,IAAAA,kBADFW,EACEX,IAAAA,WAEEY,EAAqBZ,IAAAA,eACzB,2BAGuBa,EAAAA,GAAAA,MAAAA,aAEzB,SAASC,EAA2BC,GAS9BA,EAPFC,SAOED,EANFE,WAFF,IAGEC,EAKEH,EALFG,WACAC,EAIEJ,EAJFI,cACAC,EAGEL,EAHFK,gBACAC,EAEEN,EAFFM,iBACAC,EACEP,EADFO,gBAGMC,EAAmBH,EAAgBI,SAAnCD,eAEDE,EAAP,GAA8BC,EAAAA,EAAAA,KAA9B,MACA,KAGIC,EAAAA,EAAAA,MAHJ,UACIC,EADJ,EACIA,oBAAqBC,EADzB,EACyBA,UAGzB,GAJA,KAIA,GAAgDC,EAAAA,EAAAA,MAAhD,WAASC,EAAT,EAASA,cAAeC,EAAxB,EAAwBA,MAASC,EAAjC,KACA,KAAiDC,EAAAA,EAAAA,MAAjD,GAAOC,EAAP,KACA,GADA,KACA,GAAkCC,EAAAA,EAAAA,WAAS,GAA3C,IAAOC,EAAP,KAAkBC,EAAlB,KACA,KAAwDF,EAAAA,EAAAA,UAAS,MAAjE,GAAOG,EAAP,KAA6BC,EAA7B,KACA,KAA8BJ,EAAAA,EAAAA,UAAS,MAAvC,GAAOK,EAAP,KAAgBC,EAAhB,KAEMC,EAAmB,SAAAC,GACvB,IACMC,EADYD,EAAIE,OACUL,QAC1BM,EDtCK,WACb,IAAMA,EAAQ,GAKd,OAJAC,OAAOC,KAAKhD,GAAoBiD,SAAQ,SAAAC,GAAU,OAChDJ,EAAMK,KAAN,MAAAL,EAAK,EAAS9C,EAAmBkD,QAG5BJ,ECgCSM,GACRC,EAAY/B,EAAegC,MAAMC,eC/D5B,SAA6Cf,EAASM,GACnE,IAAMnC,EAAqBT,IAAAA,eAAuB,2BAElD4C,EAAMG,SAAQ,SAAAO,GACZ,GAAIA,EAAKC,qBAAqB9C,EAAoB,CAEhD,IAAM+C,GAAW,IAAIF,GAAOG,KAC5BzD,IAAAA,yBAAiCsC,EAASkB,OAI9CxD,IAAAA,wBAAgCsC,EAAS,MAAO,CAAEoB,gBAAiB,IACnE1D,IAAAA,wBAAgCsC,EAAS,OAAQ,CAAEoB,gBAAiB,IACpE1D,IAAAA,wBAAgCsC,EAAS,OAAQ,CAAEoB,gBAAiB,IACpE1D,IAAAA,wBAAgCsC,EAAS,wBAAyB,IAClEtC,IAAAA,wBAAgCsC,EAAS,gBAAiB,CAAEqB,SAAU,IACtE3D,IAAAA,wBAAgCsC,EAAS,iBAAkB,IAC3DtC,IAAAA,yBAAiCsC,EAAS,UAAW,IDiDnDsB,CAAmClB,EAAeE,GAClD/C,IAAAA,wBAAyC6C,EAAeS,EAAW,CACjEO,gBAAiB,IAIF7D,IAAAA,MAAAA,MAAAA,MACgBgE,QAC/B,SAAAP,GAAI,OAAIA,EAAKhB,UAAYI,KAGXK,SAAQ,SAAAO,GACtB,GACEA,aAAgBjD,GAChBiD,aAAgBhD,GAChBgD,aAAgB/C,GAChB+C,aAAgB9C,EAChB,CACA,IAAMsD,EAAgBR,EAAKQ,cAE3BA,EAAcC,cAAgB7B,EAE9BoB,EAAKQ,cAAgBA,OAChB,GAAIR,aAAgB7C,EAAoB,CAC7C,IAAMqD,EAAgBR,EAAKQ,cAE3BA,EAAcC,cAAe,EAE7BT,EAAKQ,cAAgBA,MAKFE,IAAAA,kBAA8BtB,GAElCuB,OACjBD,IAAAA,YAAwBtB,GAG1BH,EAAWG,GAEX,IAAMwB,EAAqC,IAAIC,YAC7C,yCACA,CACExB,OAAQ,CACNyB,QAAS,2BACTC,eAAgB3B,EAChB1B,cAAAA,KAKNsD,SAASC,cAAcL,KAGzBM,EAAAA,EAAAA,YAAU,WACHlC,IAGYzC,IAAAA,MAAAA,MAAAA,MACgBgE,QAAO,SAAAP,GAAI,OAAIA,EAAKhB,UAAYA,KAEjDS,SAAQ,SAAAO,GACtB,GACEA,aAAgBjD,GAChBiD,aAAgBhD,GAChBgD,aAAgB/C,GAChB+C,aAAgB9C,EAChB,CACA,IAAMsD,EAAgBR,EAAKQ,cAE3BA,EAAcC,cAAgB7B,EAE9BoB,EAAKQ,cAAgBA,MAIFE,IAAAA,kBAA8B1B,GAElC2B,OACjBD,IAAAA,YAAwB1B,MAEzB,CAACJ,IAgBgDR,EAAU+C,WAC5D,SAAAC,GAAE,OAAIA,EAAGC,wBAA0B5D,EAAW4D,yBADhD,IAGQC,EAAkBtD,EAAoB8C,QAAtCQ,cAGNC,EAKE9D,EALF8D,SACAC,EAIE/D,EAJF+D,WACAC,EAGEhE,EAHFgE,kBACAC,EAEEjE,EAFFiE,kBACAC,EACElE,EADFkE,aAGF,EAQIlE,EAAWmE,OAAO,GAPpBC,GADF,EACEA,UACAC,GAFF,EAEEA,YACAC,GAHF,EAGEA,WACAC,GAJF,EAIEA,WACAC,GALF,EAKEA,eACAC,GANF,EAMEA,qBACAC,GAPF,EAOEA,sBAGEb,EAAcc,SAASV,KAAuB9C,GAChDC,GAAcD,GAGhB,IAAMyD,GAAQjE,EAAUkE,OAAS,EAAIC,EAAgB7E,GAAiB,GAEtE,SAAS8E,GAAkBC,GACzB,GAAKzD,EAAL,CAKA,IAAM0D,EA2HV,SACED,EACA9E,EACAmB,EACAd,GAEA,IACM2E,EADyBhF,EAAgBI,SAAvC6E,mBACgCC,kBAEhCvB,EAAkBtD,EAAoB8C,QAAtCQ,cAMFwB,EAAuBH,EAAapC,QAAO,SAAAwC,GAAC,OAChDzB,EAAcc,SAASW,EAAEC,uBAG3B,IAAKF,EAAqBR,OAExB,OAGF,IAAMW,EAAmBH,EAAqBR,OAExCY,EAAMJ,EAAqBK,KAAI,SAAAC,GAAE,OAAIA,EAAGC,MAC1CC,EAAmBJ,EAAI/B,WAAU,SAAAkC,GAAE,OAAIA,IAAOvE,MAExB,IAAtBwE,EAEFA,EAAmB,EAED,SAAdb,IACFa,EAEuB,IACrBA,EAAmBL,EAAmB,GAEjB,UAAdR,KACTa,IAEyBL,IACvBK,EAAmB,GAOzB,OAFgCJ,EAAII,GA3KFC,CAC9Bd,EACA9E,EACAmB,EACAd,GAGF,GAAK0E,EAAL,CAIA3D,EAAwB2D,GAExB,IAAQE,EAAuBjF,EAAgBI,SAAvC6E,oBFjNG,SAAyCY,GACtD,IAAQH,EAAOG,EAAPH,GAEFI,EAAYnH,EAAsCoH,gBAExDnE,OAAOC,KAAKiE,GAAWhE,SAAQ,SAAAkE,GAC7B,IAAMC,EAA2BH,EAAUE,GAE3CpE,OAAOC,KAAKoE,GAA0BnE,SAAQ,SAAAoE,GAC5C,IAEMC,EAFwBF,EAAyBC,GAEJE,KAE/CD,GAAwBA,EAAqBxB,QAC/CwB,EAAqBrE,SAAQ,SAAAsE,GAC3BA,EAAKC,OAASD,EAAKV,KAAOA,WAMV9G,IAAAA,MAAAA,MAAAA,gBAERkD,SAAQ,SAAAT,GACtB,IACE0B,IAAAA,YAAwB1B,GACxB,MAAOiF,QE6LTC,CALqBtB,EAAmBC,kBACPsB,MAC/B,SAAApB,GAAC,OAAIA,EAAEM,KAAOX,MAKhBE,EAAmBwB,kBACjB1G,EACAgF,KAIJ,IACqB2B,GAYfC,GAAO/F,EAAMb,GACb6G,GAAaD,IAAQA,GAAKC,YAAc,EAC3BD,IAAQA,GAAKE,UAEhC,OACE,gCACE,gBAAC,KAAD,CACEC,cAAe,SAAAtF,GACbA,EAAIuF,kBACJvF,EAAIwF,kBAENC,eAAgB,SAAAnC,GAAS,OAAID,GAAkBC,IAC/CoC,UAAW,CACTxC,MAAAA,GACAzD,UAAAA,EACAkG,UAAU,EACVC,gBAAgB,EAChBC,UAAWnI,EAAW2E,GACtByD,cAAetD,EACfuD,kBAAmBzD,EACnB0D,SAAU5D,EACV6D,mBAAoB,CAClBC,YAAavD,GACT1E,EAAAA,GAAAA,MAAAA,SAAoB0E,GAAYwD,YAChC,GACJC,WAAYxD,IAAc,GAC1ByD,WAAYxD,IAAc,GAC1ByD,IAAK5D,IAAa,GAClB6D,UAAWzD,GAAc,UAClB0D,WAAW1D,IAAgB2D,QAAQ,GADjB,MAErB,GACJC,aAC2BC,IAAzB5D,GAAA,UACOyD,WAAWzD,IAAsB0D,QAAQ,GADhD,MAEI,GACNG,QAAS5D,IAAyB,KAGtC6D,eAAgB1H,EAChB2H,SAAU3H,EACV4H,UAAW,CACT3B,UAAAA,GACA4B,QAAS,kBAAMtI,EAAgBuI,WAAW,eAC1CC,kBAAmB,SAAA9B,GAAS,OAC1B/F,EAAY8H,QAAQ,CAAEjD,GAAIlF,EAAqBoG,UAAAA,KACjDgC,kBAAmB,SAAA/B,GAAS,OAC1BhG,EAAY8H,QAAQ,CAAEjD,GAAIlF,EAAqBqG,UAAAA,QAIrD,uBAAKgC,UAAU,yDA9DEnC,GAAczG,EAAiB6I,eAChD,mDADMC,UAIN,gBAACrC,GAAD,GACEnF,iBAAkBA,EAClBF,QAASA,GACL1B,KAyDJ,uBAAKkJ,UAAU,mBACZ9H,EAAoBhB,gBAAkBA,GACrC,gBAAC,KAAD,CACE2F,GAAI3E,EAAoB2E,GACxBsD,QAASjI,EAAoBiI,QAC7BC,KAAMlI,EAAoBkI,KAC1BC,QAASnI,EAAoBmI,QAC7BC,SAAUpI,EAAoBoI,SAC9BC,eAAgBrI,EAAoBqI,oBASlD1J,EAA2B2J,UAAY,CACrCvJ,WAAYwJ,IAAAA,OAAAA,WACZvJ,cAAeuJ,IAAAA,OAAAA,WACfzJ,WAAYyJ,IAAAA,OACZ1J,SAAU0J,IAAAA,KACVC,YAAaD,IAAAA,QAGf5J,EAA2B8J,aAAe,CACxCD,YAAa,IAGf,IAAM3E,EAAkB,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAuDjE","sources":["webpack:///../../../extensions/measurement-tracking/src/_shared/setCornerstoneMeasurementActive.js","webpack:///../../../extensions/measurement-tracking/src/_shared/getTools.js","webpack:///../../../extensions/measurement-tracking/src/viewports/TrackedCornerstoneViewport.js","webpack:///../../../extensions/measurement-tracking/src/_shared/setActiveAndPassiveToolsForElement.js"],"sourcesContent":["import cornerstone from 'cornerstone-core';\r\nimport cornerstoneTools from 'cornerstone-tools';\r\n\r\nconst { globalImageIdSpecificToolStateManager } = cornerstoneTools;\r\n\r\nexport default function setCornerstoneMeasurementActive(measurement) {\r\n  const { id } = measurement;\r\n\r\n  const toolState = globalImageIdSpecificToolStateManager.saveToolState();\r\n\r\n  Object.keys(toolState).forEach(imageId => {\r\n    const imageIdSpecificToolState = toolState[imageId];\r\n\r\n    Object.keys(imageIdSpecificToolState).forEach(toolType => {\r\n      const toolSpecificToolState = imageIdSpecificToolState[toolType];\r\n\r\n      const toolSpecificToolData = toolSpecificToolState.data;\r\n\r\n      if (toolSpecificToolData && toolSpecificToolData.length) {\r\n        toolSpecificToolData.forEach(data => {\r\n          data.active = data.id === id ? true : false;\r\n        });\r\n      }\r\n    });\r\n  });\r\n\r\n  const enabledElements = cornerstoneTools.store.state.enabledElements;\r\n\r\n  enabledElements.forEach(element => {\r\n    try {\r\n      cornerstone.updateImage(element);\r\n    } catch (ex) {\r\n      // https://github.com/cornerstonejs/cornerstone/blob/master/src/updateImage.js#L16\r\n      // This fails if enabledElement.image is undefined and we have no layers\r\n      // Instead of throwing, it should _probably_ do nothing.\r\n      // We'll just swallow the exception\r\n    }\r\n  });\r\n}\r\n","import csTools from 'cornerstone-tools';\r\n\r\nconst toolsGroupedByType = {\r\n  touch: [csTools.PanMultiTouchTool, csTools.ZoomTouchPinchTool],\r\n  annotations: [\r\n    csTools.ArrowAnnotateTool,\r\n    csTools.BidirectionalTool,\r\n    csTools.LengthTool,\r\n    csTools.AngleTool,\r\n    csTools.FreehandRoiTool,\r\n    csTools.EllipticalRoiTool,\r\n    csTools.DragProbeTool,\r\n    csTools.RectangleRoiTool,\r\n  ],\r\n  other: [\r\n    csTools.PanTool,\r\n    csTools.ZoomTool,\r\n    csTools.WwwcTool,\r\n    csTools.WwwcRegionTool,\r\n    csTools.MagnifyTool,\r\n    csTools.StackScrollTool,\r\n    csTools.StackScrollMouseWheelTool,\r\n    csTools.OverlayTool,\r\n  ],\r\n};\r\n\r\nexport default function getTools() {\r\n  const tools = [];\r\n  Object.keys(toolsGroupedByType).forEach(toolsGroup =>\r\n    tools.push(...toolsGroupedByType[toolsGroup])\r\n  );\r\n\r\n  return tools;\r\n}\r\n\r\nexport { toolsGroupedByType };\r\n","import React, { useEffect, useState, useRef } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cornerstone from 'cornerstone-core';\r\nimport cornerstoneTools from 'cornerstone-tools';\r\nimport OHIF, { utils } from '@ohif/core';\r\nimport {\r\n  Notification,\r\n  ViewportActionBar,\r\n  useCine,\r\n  useViewportGrid,\r\n  useViewportDialog,\r\n} from '@ohif/ui';\r\nimport { useTrackedMeasurements } from './../getContextModule';\r\nimport setCornerstoneMeasurementActive from '../_shared/setCornerstoneMeasurementActive';\r\nimport setActiveAndPassiveToolsForElement from '../_shared/setActiveAndPassiveToolsForElement';\r\nimport getTools from '../_shared/getTools';\r\n\r\nconst { formatDate } = utils;\r\n\r\n// TODO -> Get this list from the list of tracked measurements.\r\n// TODO -> We can now get a list of tool names from the measurement service.\r\n// Use the toolnames to check which tools we have instead, using the\r\n// Classes isn't really extensible unless we add the classes to the measurement\r\n// Service definition, which feels wrong.\r\nconst {\r\n  ArrowAnnotateTool,\r\n  BidirectionalTool,\r\n  EllipticalRoiTool,\r\n  LengthTool,\r\n} = cornerstoneTools;\r\n\r\nconst BaseAnnotationTool = cornerstoneTools.importInternal(\r\n  'base/BaseAnnotationTool'\r\n);\r\n\r\nconst { StackManager } = OHIF.utils;\r\n\r\nfunction TrackedCornerstoneViewport(props) {\r\n  const {\r\n    children,\r\n    dataSource,\r\n    displaySet,\r\n    viewportIndex,\r\n    servicesManager,\r\n    extensionManager,\r\n    commandsManager,\r\n  } = props;\r\n\r\n  const { ToolBarService } = servicesManager.services;\r\n\r\n  const [trackedMeasurements] = useTrackedMeasurements();\r\n  const [\r\n    { activeViewportIndex, viewports },\r\n    viewportGridService,\r\n  ] = useViewportGrid();\r\n  const [{ isCineEnabled, cines }, cineService] = useCine();\r\n  const [viewportDialogState, viewportDialogApi] = useViewportDialog();\r\n  const [isTracked, setIsTracked] = useState(false);\r\n  const [trackedMeasurementId, setTrackedMeasurementId] = useState(null);\r\n  const [element, setElement] = useState(null);\r\n\r\n  const onElementEnabled = evt => {\r\n    const eventData = evt.detail;\r\n    const targetElement = eventData.element;\r\n    const tools = getTools();\r\n    const toolAlias = ToolBarService.state.primaryToolId;\r\n\r\n    // Activate appropriate tool bindings for element\r\n    setActiveAndPassiveToolsForElement(targetElement, tools);\r\n    cornerstoneTools.setToolActiveForElement(targetElement, toolAlias, {\r\n      mouseButtonMask: 1,\r\n    });\r\n\r\n    // Set dashed, based on tracking, for this viewport\r\n    const allTools = cornerstoneTools.store.state.tools;\r\n    const toolsForElement = allTools.filter(\r\n      tool => tool.element === targetElement\r\n    );\r\n\r\n    toolsForElement.forEach(tool => {\r\n      if (\r\n        tool instanceof ArrowAnnotateTool ||\r\n        tool instanceof BidirectionalTool ||\r\n        tool instanceof EllipticalRoiTool ||\r\n        tool instanceof LengthTool\r\n      ) {\r\n        const configuration = tool.configuration;\r\n\r\n        configuration.renderDashed = !isTracked;\r\n\r\n        tool.configuration = configuration;\r\n      } else if (tool instanceof BaseAnnotationTool) {\r\n        const configuration = tool.configuration;\r\n\r\n        configuration.renderDashed = true;\r\n\r\n        tool.configuration = configuration;\r\n      }\r\n    });\r\n\r\n    // Update image after setting tool config\r\n    const enabledElement = cornerstone.getEnabledElement(targetElement);\r\n\r\n    if (enabledElement.image) {\r\n      cornerstone.updateImage(targetElement);\r\n    }\r\n\r\n    setElement(targetElement);\r\n\r\n    const OHIFCornerstoneEnabledElementEvent = new CustomEvent(\r\n      'ohif-cornerstone-enabled-element-event',\r\n      {\r\n        detail: {\r\n          context: 'ACTIVE_VIEWPORT::TRACKED',\r\n          enabledElement: targetElement,\r\n          viewportIndex,\r\n        },\r\n      }\r\n    );\r\n\r\n    document.dispatchEvent(OHIFCornerstoneEnabledElementEvent);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!element) {\r\n      return;\r\n    }\r\n    const allTools = cornerstoneTools.store.state.tools;\r\n    const toolsForElement = allTools.filter(tool => tool.element === element);\r\n\r\n    toolsForElement.forEach(tool => {\r\n      if (\r\n        tool instanceof ArrowAnnotateTool ||\r\n        tool instanceof BidirectionalTool ||\r\n        tool instanceof EllipticalRoiTool ||\r\n        tool instanceof LengthTool\r\n      ) {\r\n        const configuration = tool.configuration;\r\n\r\n        configuration.renderDashed = !isTracked;\r\n\r\n        tool.configuration = configuration;\r\n      }\r\n    });\r\n\r\n    const enabledElement = cornerstone.getEnabledElement(element);\r\n\r\n    if (enabledElement.image) {\r\n      cornerstone.updateImage(element);\r\n    }\r\n  }, [isTracked]);\r\n\r\n  // We have...\r\n  // StudyInstanceUid, DisplaySetInstanceUid\r\n  // Use displaySetInstanceUid --> SeriesInstanceUid\r\n  // Get meta for series, map to actionBar\r\n  // const displaySet = DisplaySetService.getDisplaySetByUID(\r\n  //   dSet.displaySetInstanceUID\r\n  // );\r\n  // TODO: This display contains the meta for all instances.\r\n  // That can't be right...\r\n  // console.log('DISPLAYSET', displaySet);\r\n  // const seriesMeta = DicomMetadataStore.getSeries(this.props.displaySet.StudyInstanceUID, '');\r\n  // console.log(seriesMeta);\r\n\r\n  // TODO: Share this logic so it isn't out of sync where we retrieve\r\n  const firstViewportIndexWithMatchingDisplaySetUid = viewports.findIndex(\r\n    vp => vp.displaySetInstanceUID === displaySet.displaySetInstanceUID\r\n  );\r\n  const { trackedSeries } = trackedMeasurements.context;\r\n\r\n  const {\r\n    Modality,\r\n    SeriesDate,\r\n    SeriesDescription,\r\n    SeriesInstanceUID,\r\n    SeriesNumber,\r\n  } = displaySet;\r\n\r\n  const {\r\n    PatientID,\r\n    PatientName,\r\n    PatientSex,\r\n    PatientAge,\r\n    SliceThickness,\r\n    SpacingBetweenSlices,\r\n    ManufacturerModelName,\r\n  } = displaySet.images[0];\r\n\r\n  if (trackedSeries.includes(SeriesInstanceUID) !== isTracked) {\r\n    setIsTracked(!isTracked);\r\n  }\r\n\r\n  const label = viewports.length > 1 ? _viewportLabels[viewportIndex] : '';\r\n\r\n  function switchMeasurement(direction) {\r\n    if (!element) {\r\n      // Element not yet enabled.\r\n      return;\r\n    }\r\n\r\n    const newTrackedMeasurementId = _getNextMeasurementId(\r\n      direction,\r\n      servicesManager,\r\n      trackedMeasurementId,\r\n      trackedMeasurements\r\n    );\r\n\r\n    if (!newTrackedMeasurementId) {\r\n      return;\r\n    }\r\n\r\n    setTrackedMeasurementId(newTrackedMeasurementId);\r\n\r\n    const { MeasurementService } = servicesManager.services;\r\n    const measurements = MeasurementService.getMeasurements();\r\n    const measurement = measurements.find(\r\n      m => m.id === newTrackedMeasurementId\r\n    );\r\n\r\n    setCornerstoneMeasurementActive(measurement);\r\n\r\n    MeasurementService.jumpToMeasurement(\r\n      viewportIndex,\r\n      newTrackedMeasurementId\r\n    );\r\n  }\r\n\r\n  const renderViewport = () => {\r\n    const { component: Component } = extensionManager.getModuleEntry(\r\n      'org.ohif.cornerstone.viewportModule.cornerstone'\r\n    );\r\n    return (\r\n      <Component\r\n        onElementEnabled={onElementEnabled}\r\n        element={element}\r\n        {...props}\r\n      ></Component>\r\n    );\r\n  };\r\n\r\n  const cine = cines[viewportIndex];\r\n  const isPlaying = (cine && cine.isPlaying) || false;\r\n  const frameRate = (cine && cine.frameRate) || 24;\r\n\r\n  return (\r\n    <>\r\n      <ViewportActionBar\r\n        onDoubleClick={evt => {\r\n          evt.stopPropagation();\r\n          evt.preventDefault();\r\n        }}\r\n        onSeriesChange={direction => switchMeasurement(direction)}\r\n        studyData={{\r\n          label,\r\n          isTracked,\r\n          isLocked: false,\r\n          isRehydratable: false,\r\n          studyDate: formatDate(SeriesDate), // TODO: This is series date. Is that ok?\r\n          currentSeries: SeriesNumber,  // TODO - switch entire currentSeries to be UID based or actual position based\r\n          seriesDescription: SeriesDescription,\r\n          modality: Modality,\r\n          patientInformation: {\r\n            patientName: PatientName\r\n              ? OHIF.utils.formatPN(PatientName.Alphabetic)\r\n              : '',\r\n            patientSex: PatientSex || '',\r\n            patientAge: PatientAge || '',\r\n            MRN: PatientID || '',\r\n            thickness: SliceThickness\r\n              ? `${parseFloat(SliceThickness).toFixed(2)}mm`\r\n              : '',\r\n            spacing:\r\n              SpacingBetweenSlices !== undefined\r\n                ? `${parseFloat(SpacingBetweenSlices).toFixed(2)}mm`\r\n                : '',\r\n            scanner: ManufacturerModelName || '',\r\n          },\r\n        }}\r\n        showNavArrows={!isCineEnabled}\r\n        showCine={isCineEnabled}\r\n        cineProps={{\r\n          isPlaying,\r\n          onClose: () => commandsManager.runCommand('toggleCine'),\r\n          onPlayPauseChange: isPlaying =>\r\n            cineService.setCine({ id: activeViewportIndex, isPlaying }),\r\n          onFrameRateChange: frameRate =>\r\n            cineService.setCine({ id: activeViewportIndex, frameRate }),\r\n        }}\r\n      />\r\n      {/* TODO: Viewport interface to accept stack or layers of content like this? */}\r\n      <div className=\"relative flex flex-row w-full h-full overflow-hidden\">\r\n        {renderViewport()}\r\n        <div className=\"absolute w-full\">\r\n          {viewportDialogState.viewportIndex === viewportIndex && (\r\n            <Notification\r\n              id={viewportDialogState.id}\r\n              message={viewportDialogState.message}\r\n              type={viewportDialogState.type}\r\n              actions={viewportDialogState.actions}\r\n              onSubmit={viewportDialogState.onSubmit}\r\n              onOutsideClick={viewportDialogState.onOutsideClick}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nTrackedCornerstoneViewport.propTypes = {\r\n  displaySet: PropTypes.object.isRequired,\r\n  viewportIndex: PropTypes.number.isRequired,\r\n  dataSource: PropTypes.object,\r\n  children: PropTypes.node,\r\n  customProps: PropTypes.object,\r\n};\r\n\r\nTrackedCornerstoneViewport.defaultProps = {\r\n  customProps: {},\r\n};\r\n\r\nconst _viewportLabels = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'];\r\n\r\nfunction _getNextMeasurementId(\r\n  direction,\r\n  servicesManager,\r\n  trackedMeasurementId,\r\n  trackedMeasurements\r\n) {\r\n  const { MeasurementService } = servicesManager.services;\r\n  const measurements = MeasurementService.getMeasurements();\r\n\r\n  const { trackedSeries } = trackedMeasurements.context;\r\n\r\n  // Get the potentially trackable measurements for this series,\r\n  // The measurements to jump between are the same\r\n  // regardless if this series is tracked or not.\r\n\r\n  const filteredMeasurements = measurements.filter(m =>\r\n    trackedSeries.includes(m.referenceSeriesUID)\r\n  );\r\n\r\n  if (!filteredMeasurements.length) {\r\n    // No measurements on this series.\r\n    return;\r\n  }\r\n\r\n  const measurementCount = filteredMeasurements.length;\r\n\r\n  const ids = filteredMeasurements.map(fm => fm.id);\r\n  let measurementIndex = ids.findIndex(id => id === trackedMeasurementId);\r\n\r\n  if (measurementIndex === -1) {\r\n    // Not tracking a measurement, or previous measurement now deleted, revert to 0.\r\n    measurementIndex = 0;\r\n  } else {\r\n    if (direction === 'left') {\r\n      measurementIndex--;\r\n\r\n      if (measurementIndex < 0) {\r\n        measurementIndex = measurementCount - 1;\r\n      }\r\n    } else if (direction === 'right') {\r\n      measurementIndex++;\r\n\r\n      if (measurementIndex === measurementCount) {\r\n        measurementIndex = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n  const newTrackedMeasurementId = ids[measurementIndex];\r\n\r\n  return newTrackedMeasurementId;\r\n}\r\n\r\nexport default TrackedCornerstoneViewport;\r\n","import csTools from 'cornerstone-tools';\r\n\r\nexport default function _setActiveAndPassiveToolsForElement(element, tools) {\r\n  const BaseAnnotationTool = csTools.importInternal('base/BaseAnnotationTool');\r\n\r\n  tools.forEach(tool => {\r\n    if (tool.prototype instanceof BaseAnnotationTool) {\r\n      // BaseAnnotationTool would likely come from csTools lib exports\r\n      const toolName = new tool().name;\r\n      csTools.setToolPassiveForElement(element, toolName); // there may be a better place to determine name; may not be on uninstantiated class\r\n    }\r\n  });\r\n\r\n  csTools.setToolActiveForElement(element, 'Pan', { mouseButtonMask: 4 });\r\n  csTools.setToolActiveForElement(element, 'Zoom', { mouseButtonMask: 2 });\r\n  csTools.setToolActiveForElement(element, 'Wwwc', { mouseButtonMask: 1 });\r\n  csTools.setToolActiveForElement(element, 'StackScrollMouseWheel', {}); // TODO: Empty options should not be required\r\n  csTools.setToolActiveForElement(element, 'PanMultiTouch', { pointers: 2 }); // TODO: Better error if no options\r\n  csTools.setToolActiveForElement(element, 'ZoomTouchPinch', {});\r\n  csTools.setToolEnabledForElement(element, 'Overlay', {});\r\n}\r\n"],"names":["globalImageIdSpecificToolStateManager","cornerstoneTools","toolsGroupedByType","touch","csTools","annotations","other","formatDate","utils","ArrowAnnotateTool","BidirectionalTool","EllipticalRoiTool","LengthTool","BaseAnnotationTool","OHIF","TrackedCornerstoneViewport","props","children","dataSource","displaySet","viewportIndex","servicesManager","extensionManager","commandsManager","ToolBarService","services","trackedMeasurements","useTrackedMeasurements","useViewportGrid","activeViewportIndex","viewports","useCine","isCineEnabled","cines","cineService","useViewportDialog","viewportDialogState","useState","isTracked","setIsTracked","trackedMeasurementId","setTrackedMeasurementId","element","setElement","onElementEnabled","evt","targetElement","detail","tools","Object","keys","forEach","toolsGroup","push","getTools","toolAlias","state","primaryToolId","tool","prototype","toolName","name","mouseButtonMask","pointers","setActiveAndPassiveToolsForElement","filter","configuration","renderDashed","cornerstone","image","OHIFCornerstoneEnabledElementEvent","CustomEvent","context","enabledElement","document","dispatchEvent","useEffect","findIndex","vp","displaySetInstanceUID","trackedSeries","Modality","SeriesDate","SeriesDescription","SeriesInstanceUID","SeriesNumber","images","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","SpacingBetweenSlices","ManufacturerModelName","includes","label","length","_viewportLabels","switchMeasurement","direction","newTrackedMeasurementId","measurements","MeasurementService","getMeasurements","filteredMeasurements","m","referenceSeriesUID","measurementCount","ids","map","fm","id","measurementIndex","_getNextMeasurementId","measurement","toolState","saveToolState","imageId","imageIdSpecificToolState","toolType","toolSpecificToolData","data","active","ex","setCornerstoneMeasurementActive","find","jumpToMeasurement","Component","cine","isPlaying","frameRate","onDoubleClick","stopPropagation","preventDefault","onSeriesChange","studyData","isLocked","isRehydratable","studyDate","currentSeries","seriesDescription","modality","patientInformation","patientName","Alphabetic","patientSex","patientAge","MRN","thickness","parseFloat","toFixed","spacing","undefined","scanner","showNavArrows","showCine","cineProps","onClose","runCommand","onPlayPauseChange","setCine","onFrameRateChange","className","getModuleEntry","component","message","type","actions","onSubmit","onOutsideClick","propTypes","PropTypes","customProps","defaultProps"],"sourceRoot":""}