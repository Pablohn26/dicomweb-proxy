{"version":3,"file":"668.bundle.4851be16587769973311.js","mappings":"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","sources":["webpack:///../../../extensions/dicom-sr/src/tools/DICOMSRDisplayTool.js","webpack:///../../../extensions/dicom-sr/src/viewports/ViewportOverlay.js","webpack:///../../../extensions/dicom-sr/src/viewports/OHIFCornerstoneSRViewport.js"],"sourcesContent":["import { importInternal, getToolState, toolColors } from 'cornerstone-tools';\r\nimport { pixelToCanvas } from 'cornerstone-core';\r\n\r\nimport TOOL_NAMES from '../constants/toolNames';\r\nimport SCOORD_TYPES from '../constants/scoordTypes';\r\nimport id from '../id';\r\n\r\n// Cornerstone 3rd party dev kit imports\r\nconst draw = importInternal('drawing/draw');\r\nconst drawJoinedLines = importInternal('drawing/drawJoinedLines');\r\nconst drawCircle = importInternal('drawing/drawCircle');\r\nconst drawEllipse = importInternal('drawing/drawEllipse');\r\nconst drawHandles = importInternal('drawing/drawHandles');\r\nconst drawArrow = importInternal('drawing/drawArrow');\r\nconst getNewContext = importInternal('drawing/getNewContext');\r\nconst BaseTool = importInternal('base/BaseTool');\r\nconst drawLinkedTextBox = importInternal('drawing/drawLinkedTextBox');\r\n\r\n/**\r\n * @class DICOMSRDisplayTool - Renders DICOMSR data in a read only manner (i.e. as an overlay).\r\n * @extends cornerstoneTools.BaseTool\r\n */\r\nexport default class DICOMSRDisplayTool extends BaseTool {\r\n  constructor(props = {}) {\r\n    const defaultProps = {\r\n      mixins: ['enabledOrDisabledBinaryTool'],\r\n      name: TOOL_NAMES.DICOM_SR_DISPLAY_TOOL,\r\n    };\r\n\r\n    const initialProps = Object.assign(defaultProps, props);\r\n\r\n    super(initialProps);\r\n\r\n    this._module = cornerstoneTools.getModule(id);\r\n  }\r\n\r\n  renderToolData(evt) {\r\n    const eventData = evt.detail;\r\n    const { element } = eventData;\r\n    const module = this._module;\r\n\r\n    const toolState = getToolState(element, this.name);\r\n\r\n    if (!toolState) {\r\n      return;\r\n    }\r\n\r\n    const trackingUniqueIdentifiersForElement = module.getters.trackingUniqueIdentifiersForElement(\r\n      element\r\n    );\r\n\r\n    const {\r\n      activeIndex,\r\n      trackingUniqueIdentifiers,\r\n    } = trackingUniqueIdentifiersForElement;\r\n\r\n    const activeTrackingUniqueIdentifier =\r\n      trackingUniqueIdentifiers[activeIndex];\r\n\r\n    // Filter toolData to only render the data for the active SR.\r\n    const filteredToolData = toolState.data.filter(td =>\r\n      trackingUniqueIdentifiers.includes(td.TrackingUniqueIdentifier)\r\n    );\r\n\r\n    let shouldRepositionTextBoxes = false;\r\n\r\n    for (let i = 0; i < filteredToolData.length; i++) {\r\n      const data = filteredToolData[i];\r\n      const { renderableData, labels } = data;\r\n\r\n      const color =\r\n        data.TrackingUniqueIdentifier === activeTrackingUniqueIdentifier\r\n          ? toolColors.getActiveColor()\r\n          : toolColors.getToolColor();\r\n      const lineWidth = 2;\r\n      const options = {\r\n        color,\r\n        lineWidth,\r\n        handleRadius: 6,\r\n      };\r\n\r\n      Object.keys(renderableData).forEach(GraphicType => {\r\n        const renderableDataForGraphicType = renderableData[GraphicType];\r\n\r\n        switch (GraphicType) {\r\n          case SCOORD_TYPES.POINT:\r\n            this.renderPoint(renderableDataForGraphicType, eventData, options);\r\n            break;\r\n          case SCOORD_TYPES.MULTIPOINT:\r\n            this.renderMultipoint(\r\n              renderableDataForGraphicType,\r\n              eventData,\r\n              options\r\n            );\r\n            break;\r\n          case SCOORD_TYPES.POLYLINE:\r\n            this.renderPolyLine(\r\n              renderableDataForGraphicType,\r\n              eventData,\r\n              options\r\n            );\r\n            break;\r\n          case SCOORD_TYPES.CIRCLE:\r\n            this.renderCircle(renderableDataForGraphicType, eventData, options);\r\n            break;\r\n          case SCOORD_TYPES.ELLIPSE:\r\n            this.renderEllipse(\r\n              renderableDataForGraphicType,\r\n              eventData,\r\n              options\r\n            );\r\n            break;\r\n        }\r\n      });\r\n\r\n      const { element } = eventData;\r\n      const context = getNewContext(eventData.canvasContext.canvas);\r\n\r\n      if (!data.handles || !data.handles.textBox) {\r\n        const textBox = {\r\n          active: false,\r\n          hasMoved: true,\r\n          movesIndependently: false,\r\n          drawnIndependently: true,\r\n          allowedOutsideImage: true,\r\n          hasBoundingBox: true,\r\n        };\r\n\r\n        const anchorPoints = _getTextBoxAnchorPointsForRenderableData(\r\n          renderableData,\r\n          eventData\r\n        );\r\n        textBox.anchorPoints = anchorPoints;\r\n\r\n        const bottomRight = {\r\n          x: Math.max(...anchorPoints.map(point => point.x)),\r\n          y: Math.max(...anchorPoints.map(point => point.y)),\r\n        };\r\n\r\n        textBox.x = bottomRight.x;\r\n        textBox.y = bottomRight.y;\r\n\r\n        data.handles = {};\r\n        data.handles.textBox = textBox;\r\n\r\n        shouldRepositionTextBoxes = true;\r\n      }\r\n\r\n      const text = _getTextBoxLinesFromLabels(labels);\r\n\r\n      function textBoxAnchorPoints() {\r\n        return data.handles.textBox.anchorPoints;\r\n      }\r\n\r\n      draw(context, context => {\r\n        drawLinkedTextBox(\r\n          context,\r\n          element,\r\n          data.handles.textBox,\r\n          text,\r\n          data.handles,\r\n          textBoxAnchorPoints,\r\n          color,\r\n          lineWidth,\r\n          0,\r\n          true\r\n        );\r\n      });\r\n    }\r\n\r\n    // TOOD -> text boxes may overlap with other annotations at the moment.\r\n    // To be fixed after we get requirements.\r\n    // if (shouldRepositionTextBoxes) {\r\n    //   this.repositionTextBox(filteredToolData, eventData);\r\n    // }\r\n  }\r\n\r\n  // repositionTextBox(toolData, eventData) {\r\n  //   const toolBoundingBoxes = [];\r\n\r\n  //   for (let i = 0; i < toolData.length; i++) {\r\n  //     const toolDataI = toolData[i];\r\n\r\n  //     const { textBox } = toolDataI.handles;\r\n  //     const { anchorPoints } = textBox;\r\n\r\n  //     const boundingBox = _getBoundingBoxFromAnchorPoints(anchorPoints);\r\n  //     // Get the textbox bounding locations.\r\n  //     // Get the tool extents.\r\n  //   }\r\n  // }\r\n\r\n  renderPolyLine(renderableData, eventData, options) {\r\n    const { element } = eventData;\r\n    const context = getNewContext(eventData.canvasContext.canvas);\r\n\r\n    renderableData.forEach(points => {\r\n      draw(context, context => {\r\n        drawJoinedLines(context, element, points[0], points, options);\r\n      });\r\n    });\r\n  }\r\n\r\n  renderMultipoint(renderableData, eventData, options) {\r\n    const context = getNewContext(eventData.canvasContext.canvas);\r\n\r\n    renderableData.forEach(points => {\r\n      draw(context, context => {\r\n        drawHandles(context, eventData, points, options);\r\n      });\r\n    });\r\n  }\r\n\r\n  renderPoint(renderableData, eventData, options) {\r\n    // Render single point as an arrow.\r\n    const { element, image } = eventData;\r\n    const { rows, columns } = image;\r\n    const context = getNewContext(eventData.canvasContext.canvas);\r\n\r\n    const { color, lineWidth } = options;\r\n\r\n    // Find a suitable length for the image size.\r\n\r\n    const xOffset = columns / 10;\r\n    const yOffset = rows / 10;\r\n\r\n    renderableData.forEach(points => {\r\n      const point = points[0]; // The SCOORD type is POINT so the array length is 1.\r\n      draw(context, context => {\r\n        // Draw the arrow\r\n        const handleStartCanvas = pixelToCanvas(element, point);\r\n        const handleEndCanvas = pixelToCanvas(element, {\r\n          x: point.x + xOffset,\r\n          y: point.y + yOffset,\r\n        });\r\n\r\n        drawArrow(\r\n          context,\r\n          handleEndCanvas,\r\n          handleStartCanvas,\r\n          color,\r\n          lineWidth,\r\n          false\r\n        );\r\n      });\r\n    });\r\n  }\r\n\r\n  renderCircle(renderableData, eventData, options) {\r\n    const { element } = eventData;\r\n\r\n    const context = getNewContext(eventData.canvasContext.canvas);\r\n\r\n    renderableData.forEach(circle => {\r\n      const { center, radius } = circle;\r\n\r\n      drawCircle(context, element, center, radius, options);\r\n    });\r\n  }\r\n\r\n  renderEllipse(renderableData, eventData, options) {\r\n    const { element } = eventData;\r\n\r\n    const context = getNewContext(eventData.canvasContext.canvas);\r\n\r\n    renderableData.forEach(ellipse => {\r\n      const { corner1, corner2 } = ellipse;\r\n\r\n      drawEllipse(\r\n        context,\r\n        element,\r\n        corner1,\r\n        corner2,\r\n        options,\r\n        'pixel',\r\n        0 // TODO -> Work our the initial rotation and add it here so we render appropriately rotated ellipses.\r\n      );\r\n    });\r\n  }\r\n}\r\n\r\nfunction _getTextBoxLinesFromLabels(labels) {\r\n  // TODO -> max 3 for now (label + shortAxis + longAxis), need a generic solution for this!\r\n\r\n  const labelLength = Math.min(labels.length, 3);\r\n  const lines = [];\r\n\r\n  for (let i = 0; i < labelLength; i++) {\r\n    const labelEntry = labels[i];\r\n    lines.push(`${_labelToShorthand(labelEntry.label)}${labelEntry.value}`);\r\n  }\r\n\r\n  return lines;\r\n}\r\n\r\nconst SHORT_HAND_MAP = {\r\n  'Short Axis': 'W ',\r\n  'Long Axis': 'L ',\r\n  AREA: 'Area ',\r\n  Length: '',\r\n  CORNERSTONEFREETEXT: '',\r\n};\r\n\r\nfunction _labelToShorthand(label) {\r\n  const shortHand = SHORT_HAND_MAP[label];\r\n\r\n  if (shortHand !== undefined) {\r\n    return shortHand;\r\n  }\r\n\r\n  return label;\r\n}\r\n\r\nfunction _getTextBoxAnchorPointsForRenderableData(renderableData, eventData) {\r\n  let anchorPoints = [];\r\n\r\n  Object.keys(renderableData).forEach(GraphicType => {\r\n    const renderableDataForGraphicType = renderableData[GraphicType];\r\n\r\n    switch (GraphicType) {\r\n      case SCOORD_TYPES.POINT:\r\n        renderableDataForGraphicType.forEach(points => {\r\n          anchorPoints = [...anchorPoints, ...points];\r\n\r\n          // Add other arrow point based on image size.\r\n          const { image } = eventData;\r\n          const { rows, columns } = image;\r\n\r\n          const xOffset = columns / 10;\r\n          const yOffset = rows / 10;\r\n          const point = points[0];\r\n\r\n          anchorPoints.push({ x: point.x + xOffset, y: point.y + yOffset });\r\n        });\r\n\r\n        break;\r\n      case SCOORD_TYPES.MULTIPOINT:\r\n      case SCOORD_TYPES.POLYLINE:\r\n        renderableDataForGraphicType.forEach(points => {\r\n          anchorPoints = [...anchorPoints, ...points];\r\n        });\r\n        break;\r\n      case SCOORD_TYPES.CIRCLE:\r\n        renderableDataForGraphicType.forEach(circle => {\r\n          const { center, radius } = circle;\r\n\r\n          anchorPoints.push({ x: center.x + radius, y: center.y });\r\n          anchorPoints.push({ x: center.x - radius, y: center.y });\r\n          anchorPoints.push({ x: center.x, y: center.y + radius });\r\n          anchorPoints.push({ x: center.x, y: center.y - radius });\r\n        });\r\n\r\n        break;\r\n      case SCOORD_TYPES.ELLIPSE:\r\n        renderableDataForGraphicType.forEach(ellipse => {\r\n          const { corner1, corner2 } = ellipse;\r\n\r\n          const halfWidth = Math.abs(corner1.x - corner2.x) / 2;\r\n          const halfHeight = Math.abs(corner1.y - corner2.y) / 2;\r\n\r\n          const center = {\r\n            x: (corner1.x + corner2.x) / 2,\r\n            y: (corner1.y + corner2.y) / 2,\r\n          };\r\n\r\n          anchorPoints.push({ x: center.x + halfWidth, y: center.y });\r\n          anchorPoints.push({ x: center.x - halfWidth, y: center.y });\r\n          anchorPoints.push({ x: center.x, y: center.y + halfHeight });\r\n          anchorPoints.push({ x: center.x, y: center.y - halfHeight });\r\n        });\r\n        break;\r\n    }\r\n  });\r\n\r\n  return anchorPoints;\r\n}\r\n\r\nfunction _getBoundingBoxFromAnchorPoints(anchorPoints) {\r\n  let minX = Infinity;\r\n  let maxX = -Infinity;\r\n  let minY = Infinity;\r\n  let maxY = -Infinity;\r\n\r\n  anchorPoints.forEach(point => {\r\n    const { x, y } = point;\r\n\r\n    if (x > maxX) {\r\n      maxX = x;\r\n    } else if (x < minX) {\r\n      minX = x;\r\n    }\r\n\r\n    if (y > maxX) {\r\n      maxY = y;\r\n    } else if (y < minY) {\r\n      minY = y;\r\n    }\r\n  });\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cornerstone from 'cornerstone-core';\r\nimport classnames from 'classnames';\r\n\r\nconst ViewportOverlay = ({\r\n  imageId,\r\n  scale,\r\n  windowWidth,\r\n  windowCenter,\r\n  imageIndex,\r\n  stackSize,\r\n  activeTools,\r\n}) => {\r\n  const topLeft = 'top-viewport left-viewport';\r\n  const topRight = 'top-viewport right-viewport-scrollbar';\r\n  const bottomRight = 'bottom-viewport right-viewport-scrollbar';\r\n  const bottomLeft = 'bottom-viewport left-viewport';\r\n  const overlay = 'absolute pointer-events-none';\r\n\r\n  const isZoomActive = activeTools.includes('Zoom');\r\n  const isWwwcActive = activeTools.includes('Wwwc');\r\n\r\n  if (!imageId) {\r\n    return null;\r\n  }\r\n\r\n  const generalImageModule =\r\n    cornerstone.metaData.get('generalImageModule', imageId) || {};\r\n  const { instanceNumber } = generalImageModule;\r\n\r\n  return (\r\n    <div className=\"text-primary-light\">\r\n      <div className={classnames(overlay, topLeft)}>\r\n        {isZoomActive && (\r\n          <div className=\"flex flex-row\">\r\n            <span className=\"mr-1\">Zoom:</span>\r\n            <span className=\"font-light\">{scale.toFixed(2)}x</span>\r\n          </div>\r\n        )}\r\n        {isWwwcActive && (\r\n          <div className=\"flex flex-row\">\r\n            <span className=\"mr-1\">W:</span>\r\n            <span className=\"ml-1 mr-2 font-light\">\r\n              {windowWidth.toFixed(0)}\r\n            </span>\r\n            <span className=\"mr-1\">L:</span>\r\n            <span className=\"ml-1 font-light\">{windowCenter.toFixed(0)}</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className={classnames(overlay, topRight)}>\r\n        {stackSize > 1 && (\r\n          <div className=\"flex flex-row\">\r\n            <span className=\"mr-1\">I:</span>\r\n            <span className=\"font-light\">\r\n              {`${instanceNumber} (${imageIndex}/${stackSize})`}\r\n            </span>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className={classnames(overlay, bottomRight)}></div>\r\n      <div className={classnames(overlay, bottomLeft)}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nViewportOverlay.defaultProps = {\r\n  stackSize: 99999,\r\n};\r\n\r\nViewportOverlay.propTypes = {\r\n  scale: PropTypes.number.isRequired,\r\n  windowWidth: PropTypes.number.isRequired,\r\n  windowCenter: PropTypes.number.isRequired,\r\n  imageId: PropTypes.string.isRequired,\r\n  imageIndex: PropTypes.number.isRequired,\r\n  stackSize: PropTypes.number.isRequired,\r\n  activeTools: PropTypes.arrayOf(PropTypes.string),\r\n};\r\n\r\nViewportOverlay.defaultProps = {\r\n  activeTools: [],\r\n};\r\n\r\nexport default ViewportOverlay;\r\n","import React, { useCallback, useContext, useEffect, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cornerstoneTools from 'cornerstone-tools';\r\nimport cornerstone from 'cornerstone-core';\r\nimport CornerstoneViewport from 'react-cornerstone-viewport';\r\nimport OHIF, { DicomMetadataStore, utils } from '@ohif/core';\r\nimport DICOMSRDisplayTool from './../tools/DICOMSRDisplayTool';\r\nimport ViewportOverlay from './ViewportOverlay';\r\nimport {\r\n  Notification,\r\n  ViewportActionBar,\r\n  useViewportGrid,\r\n  useViewportDialog,\r\n} from '@ohif/ui';\r\nimport TOOL_NAMES from './../constants/toolNames';\r\nimport { adapters } from 'dcmjs';\r\nimport id from './../id';\r\n\r\nconst { formatDate } = utils;\r\nconst scrollToIndex = cornerstoneTools.importInternal('util/scrollToIndex');\r\nconst globalImageIdSpecificToolStateManager =\r\n  cornerstoneTools.globalImageIdSpecificToolStateManager;\r\n\r\nconst { StackManager, guid } = OHIF.utils;\r\n\r\nconst MEASUREMENT_TRACKING_EXTENSION_ID = 'org.ohif.measurement-tracking';\r\n\r\nfunction OHIFCornerstoneSRViewport({\r\n  children,\r\n  dataSource,\r\n  displaySet,\r\n  viewportIndex,\r\n  servicesManager,\r\n  extensionManager,\r\n}) {\r\n  const {\r\n    DisplaySetService,\r\n    MeasurementService,\r\n    ToolBarService,\r\n  } = servicesManager.services;\r\n  const [viewportGrid, viewportGridService] = useViewportGrid();\r\n  const [viewportDialogState, viewportDialogApi] = useViewportDialog();\r\n  const [measurementSelected, setMeasurementSelected] = useState(0);\r\n  const [measurementCount, setMeasurementCount] = useState(1);\r\n  const [viewportData, setViewportData] = useState(null);\r\n  const [activeDisplaySetData, setActiveDisplaySetData] = useState({});\r\n  const [element, setElement] = useState(null);\r\n  const [isHydrated, setIsHydrated] = useState(displaySet.isHydrated);\r\n  const { viewports, activeViewportIndex } = viewportGrid;\r\n\r\n  useEffect(() => {\r\n    const onDisplaySetsRemovedSubscription = DisplaySetService.subscribe(\r\n      DisplaySetService.EVENTS.DISPLAY_SETS_REMOVED,\r\n      ({ displaySetInstanceUIDs }) => {\r\n        const activeViewport = viewports[activeViewportIndex];\r\n        if (\r\n          displaySetInstanceUIDs.includes(activeViewport.displaySetInstanceUID)\r\n        ) {\r\n          viewportGridService.setDisplaysetForViewport({\r\n            viewportIndex: activeViewportIndex,\r\n            displaySetInstanceUID: undefined,\r\n          });\r\n        }\r\n      }\r\n    );\r\n\r\n    return () => {\r\n      onDisplaySetsRemovedSubscription.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  // Optional hook into tracking extension, if present.\r\n  let trackedMeasurements;\r\n  let sendTrackedMeasurementsEvent;\r\n\r\n  // TODO: this is a hook that fails if we register/de-register\r\n  //\r\n  if (\r\n    extensionManager.registeredExtensionIds.includes(\r\n      MEASUREMENT_TRACKING_EXTENSION_ID\r\n    )\r\n  ) {\r\n    const contextModule = extensionManager.getModuleEntry(\r\n      'org.ohif.measurement-tracking.contextModule.TrackedMeasurementsContext'\r\n    );\r\n\r\n    const useTrackedMeasurements = () => useContext(contextModule.context);\r\n\r\n    [\r\n      trackedMeasurements,\r\n      sendTrackedMeasurementsEvent,\r\n    ] = useTrackedMeasurements();\r\n  }\r\n\r\n  // Locked if tracking any series\r\n  let isLocked = trackedMeasurements?.context?.trackedSeries?.length > 0;\r\n  useEffect(() => {\r\n    isLocked = trackedMeasurements?.context?.trackedSeries?.length > 0;\r\n  }, [trackedMeasurements]);\r\n\r\n  function _getToolAlias() {\r\n    const primaryToolId = ToolBarService.state.primaryToolId;\r\n    let toolAlias = primaryToolId;\r\n\r\n    switch (primaryToolId) {\r\n      case 'Length':\r\n        toolAlias = 'SRLength';\r\n        break;\r\n      case 'Bidirectional':\r\n        toolAlias = 'SRBidirectional';\r\n        break;\r\n      case 'ArrowAnnotate':\r\n        toolAlias = 'SRArrowAnnotate';\r\n        break;\r\n      case 'EllipticalRoi':\r\n        toolAlias = 'SREllipticalRoi';\r\n        break;\r\n    }\r\n\r\n    return toolAlias;\r\n  }\r\n\r\n  const onElementEnabled = evt => {\r\n    const eventData = evt.detail;\r\n    const targetElement = eventData.element;\r\n    const toolAlias = _getToolAlias(); // These are 1:1 for built-in only\r\n\r\n    // ~~ MAGIC\r\n    cornerstoneTools.addToolForElement(targetElement, DICOMSRDisplayTool);\r\n    cornerstoneTools.setToolEnabledForElement(\r\n      targetElement,\r\n      TOOL_NAMES.DICOM_SR_DISPLAY_TOOL\r\n    );\r\n\r\n    // ~~ Variants\r\n    cornerstoneTools.addToolForElement(\r\n      targetElement,\r\n      cornerstoneTools.LengthTool,\r\n      {\r\n        name: 'SRLength',\r\n        configuration: {\r\n          renderDashed: true,\r\n        },\r\n      }\r\n    );\r\n    cornerstoneTools.addToolForElement(\r\n      targetElement,\r\n      cornerstoneTools.ArrowAnnotateTool,\r\n      {\r\n        name: 'SRArrowAnnotate',\r\n        configuration: {\r\n          renderDashed: true,\r\n        },\r\n      }\r\n    );\r\n    cornerstoneTools.addToolForElement(\r\n      targetElement,\r\n      cornerstoneTools.BidirectionalTool,\r\n      {\r\n        name: 'SRBidirectional',\r\n        configuration: {\r\n          renderDashed: true,\r\n        },\r\n      }\r\n    );\r\n    cornerstoneTools.addToolForElement(\r\n      targetElement,\r\n      cornerstoneTools.EllipticalRoiTool,\r\n      {\r\n        name: 'SREllipticalRoi',\r\n        configuration: {\r\n          renderDashed: true,\r\n        },\r\n      }\r\n    );\r\n\r\n    // ~~ Business as usual\r\n    cornerstoneTools.setToolActiveForElement(targetElement, 'PanMultiTouch', {\r\n      pointers: 2,\r\n    });\r\n    cornerstoneTools.setToolActiveForElement(\r\n      targetElement,\r\n      'ZoomTouchPinch',\r\n      {}\r\n    );\r\n\r\n    // TODO: Add always dashed tool alternative aliases\r\n    // TODO: or same name... alternative config?\r\n    cornerstoneTools.setToolActiveForElement(targetElement, toolAlias, {\r\n      mouseButtonMask: 1,\r\n    });\r\n    cornerstoneTools.setToolActiveForElement(targetElement, 'Pan', {\r\n      mouseButtonMask: 4,\r\n    });\r\n    cornerstoneTools.setToolActiveForElement(targetElement, 'Zoom', {\r\n      mouseButtonMask: 2,\r\n    });\r\n    cornerstoneTools.setToolActiveForElement(\r\n      targetElement,\r\n      'StackScrollMouseWheel',\r\n      {}\r\n    );\r\n\r\n    setTrackingUniqueIdentifiersForElement(targetElement);\r\n    setElement(targetElement);\r\n\r\n    // TODO: Enabled Element appears to be incorrect here, it should be called\r\n    // 'element' since it is the DOM element, not the enabledElement object\r\n    const OHIFCornerstoneEnabledElementEvent = new CustomEvent(\r\n      'ohif-cornerstone-enabled-element-event',\r\n      {\r\n        detail: {\r\n          context: 'ACTIVE_VIEWPORT::STRUCTURED_REPORT',\r\n          enabledElement: targetElement,\r\n          viewportIndex,\r\n        },\r\n      }\r\n    );\r\n\r\n    document.dispatchEvent(OHIFCornerstoneEnabledElementEvent);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!displaySet.isLoaded) {\r\n      displaySet.load();\r\n    }\r\n    setIsHydrated(displaySet.isHydrated);\r\n  }, [displaySet]);\r\n\r\n  const setTrackingUniqueIdentifiersForElement = useCallback(targetElement => {\r\n    const { measurements } = displaySet;\r\n\r\n    const srModule = cornerstoneTools.getModule(id);\r\n\r\n    srModule.setters.trackingUniqueIdentifiersForElement(\r\n      targetElement,\r\n      measurements.map(measurement => measurement.TrackingUniqueIdentifier),\r\n      measurementSelected\r\n    );\r\n  });\r\n\r\n  useEffect(() => {\r\n    const numMeasurements = displaySet.measurements.length;\r\n\r\n    setMeasurementCount(numMeasurements);\r\n  }, [dataSource, displaySet]);\r\n\r\n  const updateViewport = useCallback(newMeasurementSelected => {\r\n    const {\r\n      StudyInstanceUID,\r\n      displaySetInstanceUID,\r\n      sopClassUids,\r\n    } = displaySet;\r\n\r\n    if (!StudyInstanceUID || !displaySetInstanceUID) {\r\n      return;\r\n    }\r\n\r\n    if (sopClassUids && sopClassUids.length > 1) {\r\n      console.warn(\r\n        'More than one SOPClassUID in the same series is not yet supported.'\r\n      );\r\n    }\r\n\r\n    _getViewportAndActiveDisplaySetData(\r\n      dataSource,\r\n      displaySet,\r\n      newMeasurementSelected,\r\n      DisplaySetService,\r\n      element\r\n    ).then(({ viewportData, activeDisplaySetData }) => {\r\n      setViewportData({ ...viewportData });\r\n      setActiveDisplaySetData({ ...activeDisplaySetData });\r\n      setMeasurementSelected(newMeasurementSelected);\r\n\r\n      if (element !== null) {\r\n        scrollToIndex(element, viewportData.stack.currentImageIdIndex);\r\n        cornerstone.updateImage(element);\r\n      }\r\n    });\r\n  });\r\n\r\n  useEffect(\r\n    () => {\r\n      if (element !== null) {\r\n        setTrackingUniqueIdentifiersForElement(element);\r\n      }\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [dataSource, displaySet]\r\n  );\r\n\r\n  useEffect(\r\n    () => {\r\n      updateViewport(measurementSelected);\r\n    },\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    [dataSource, displaySet, element]\r\n  );\r\n\r\n  const firstViewportIndexWithMatchingDisplaySetUid = viewports.findIndex(\r\n    vp => vp.displaySetInstanceUID === displaySet.displaySetInstanceUID\r\n  );\r\n\r\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n  let childrenWithProps = null;\r\n\r\n  if (!viewportData) {\r\n    return null;\r\n  }\r\n\r\n  const {\r\n    imageIds,\r\n    currentImageIdIndex,\r\n    // If this comes from the instance, would be a better default\r\n    // `FrameTime` in the instance\r\n    // frameRate = 0,\r\n  } = viewportData.stack;\r\n\r\n  if (children && children.length) {\r\n    childrenWithProps = children.map((child, index) => {\r\n      return (\r\n        child &&\r\n        React.cloneElement(child, {\r\n          viewportIndex,\r\n          key: index,\r\n        })\r\n      );\r\n    });\r\n  }\r\n\r\n  const { Modality } = displaySet;\r\n\r\n  const {\r\n    PatientID,\r\n    PatientName,\r\n    PatientSex,\r\n    PatientAge,\r\n    SliceThickness,\r\n    ManufacturerModelName,\r\n    StudyDate,\r\n    SeriesDescription,\r\n    SeriesInstanceUID,\r\n    SpacingBetweenSlices,\r\n    SeriesNumber,\r\n    displaySetInstanceUID,\r\n  } = activeDisplaySetData;\r\n\r\n  const onMeasurementChange = direction => {\r\n    let newMeasurementSelected = measurementSelected;\r\n\r\n    if (direction === 'right') {\r\n      newMeasurementSelected++;\r\n\r\n      if (newMeasurementSelected >= measurementCount) {\r\n        newMeasurementSelected = 0;\r\n      }\r\n    } else {\r\n      newMeasurementSelected--;\r\n\r\n      if (newMeasurementSelected < 0) {\r\n        newMeasurementSelected = measurementCount - 1;\r\n      }\r\n    }\r\n\r\n    updateViewport(newMeasurementSelected);\r\n  };\r\n\r\n  const label = viewports.length > 1 ? _viewportLabels[viewportIndex] : '';\r\n\r\n  // TODO -> disabled double click for now: onDoubleClick={_onDoubleClick}\r\n  return (\r\n    <>\r\n      <ViewportActionBar\r\n        onDoubleClick={evt => {\r\n          evt.stopPropagation();\r\n          evt.preventDefault();\r\n        }}\r\n        onPillClick={() => {\r\n          sendTrackedMeasurementsEvent('RESTORE_PROMPT_HYDRATE_SR', {\r\n            displaySetInstanceUID: displaySet.displaySetInstanceUID,\r\n            viewportIndex,\r\n          });\r\n        }}\r\n        onSeriesChange={onMeasurementChange}\r\n        studyData={{\r\n          label,\r\n          useAltStyling: true,\r\n          isTracked: false,\r\n          isLocked,\r\n          isRehydratable: displaySet.isRehydratable,\r\n          isHydrated,\r\n          studyDate: formatDate(StudyDate),\r\n          currentSeries: SeriesNumber,\r\n          seriesDescription: SeriesDescription,\r\n          modality: Modality,\r\n          patientInformation: {\r\n            patientName: PatientName\r\n              ? OHIF.utils.formatPN(PatientName.Alphabetic)\r\n              : '',\r\n            patientSex: PatientSex || '',\r\n            patientAge: PatientAge || '',\r\n            MRN: PatientID || '',\r\n            thickness: SliceThickness ? `${SliceThickness.toFixed(2)}mm` : '',\r\n            spacing:\r\n              SpacingBetweenSlices !== undefined\r\n                ? `${SpacingBetweenSlices.toFixed(2)}mm`\r\n                : '',\r\n            scanner: ManufacturerModelName || '',\r\n          },\r\n        }}\r\n      />\r\n\r\n      <div className=\"relative flex flex-row w-full h-full overflow-hidden\">\r\n        <CornerstoneViewport\r\n          onElementEnabled={onElementEnabled}\r\n          viewportIndex={viewportIndex}\r\n          imageIds={imageIds}\r\n          imageIdIndex={currentImageIdIndex}\r\n          isActive={true} // todo\r\n          isStackPrefetchEnabled={true} // todo\r\n          isPlaying={false}\r\n          frameRate={24}\r\n          isOverlayVisible={true}\r\n          // Sync resize throttle w/ sidepanel animation duration to prevent\r\n          // seizure inducing strobe blinking effect\r\n          resizeRefreshRateMs={150}\r\n          viewportOverlayComponent={props => {\r\n            return (\r\n              <ViewportOverlay\r\n                {...props}\r\n                activeTools={ToolBarService.getActiveTools()}\r\n              />\r\n            );\r\n          }}\r\n        />\r\n        <div className=\"absolute w-full\">\r\n          {viewportDialogState.viewportIndex === viewportIndex && (\r\n            <Notification\r\n              message={viewportDialogState.message}\r\n              type={viewportDialogState.type}\r\n              actions={viewportDialogState.actions}\r\n              onSubmit={viewportDialogState.onSubmit}\r\n              onOutsideClick={viewportDialogState.onOutsideClick}\r\n            />\r\n          )}\r\n        </div>\r\n        {childrenWithProps}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst _viewportLabels = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'];\r\n\r\nOHIFCornerstoneSRViewport.propTypes = {\r\n  displaySet: PropTypes.object.isRequired,\r\n  viewportIndex: PropTypes.number.isRequired,\r\n  dataSource: PropTypes.object,\r\n  children: PropTypes.node,\r\n  customProps: PropTypes.object,\r\n};\r\n\r\nOHIFCornerstoneSRViewport.defaultProps = {\r\n  customProps: {},\r\n};\r\n\r\n/**\r\n * Obtain the CornerstoneTools Stack for the specified display set.\r\n *\r\n * @param {Object} displaySet\r\n * @param {Object} dataSource\r\n * @return {Object} CornerstoneTools Stack\r\n */\r\nfunction _getCornerstoneStack(\r\n  measurement,\r\n  dataSource,\r\n  DisplaySetService,\r\n  element\r\n) {\r\n  const { displaySetInstanceUID, TrackingUniqueIdentifier } = measurement;\r\n\r\n  const displaySet = DisplaySetService.getDisplaySetByUID(\r\n    displaySetInstanceUID\r\n  );\r\n\r\n  // Get stack from Stack Manager\r\n  const storedStack = StackManager.findOrCreateStack(displaySet, dataSource);\r\n\r\n  // Clone the stack here so we don't mutate it\r\n  const stack = Object.assign({}, storedStack);\r\n\r\n  const { imageId } = measurement;\r\n\r\n  stack.currentImageIdIndex = stack.imageIds.findIndex(i => i === imageId);\r\n\r\n  if (element) {\r\n    const srModule = cornerstoneTools.getModule(id);\r\n\r\n    srModule.setters.activeTrackingUniqueIdentifierForElement(\r\n      element,\r\n      TrackingUniqueIdentifier\r\n    );\r\n  }\r\n\r\n  return stack;\r\n}\r\n\r\nasync function _getViewportAndActiveDisplaySetData(\r\n  dataSource,\r\n  displaySet,\r\n  measurementSelected,\r\n  DisplaySetService,\r\n  element\r\n) {\r\n  let viewportData;\r\n\r\n  const { measurements } = displaySet;\r\n  const measurement = measurements[measurementSelected];\r\n\r\n  const stack = _getCornerstoneStack(\r\n    measurement,\r\n    dataSource,\r\n    DisplaySetService,\r\n    element\r\n  );\r\n\r\n  viewportData = {\r\n    StudyInstanceUID: displaySet.StudyInstanceUID,\r\n    displaySetInstanceUID: displaySet.displaySetInstanceUID,\r\n    stack,\r\n  };\r\n\r\n  const { displaySetInstanceUID } = measurement;\r\n\r\n  const referencedDisplaySet = DisplaySetService.getDisplaySetByUID(\r\n    displaySetInstanceUID\r\n  );\r\n\r\n  const image0 = referencedDisplaySet.images[0];\r\n  const activeDisplaySetData = {\r\n    PatientID: image0.PatientID,\r\n    PatientName: image0.PatientName,\r\n    PatientSex: image0.PatientSex,\r\n    PatientAge: image0.PatientAge,\r\n    SliceThickness: image0.SliceThickness,\r\n    StudyDate: image0.StudyDate,\r\n    SeriesDescription: image0.SeriesDescription,\r\n    SeriesInstanceUID: image0.SeriesInstanceUID,\r\n    SeriesNumber: image0.SeriesNumber,\r\n    ManufacturerModelName: image0.ManufacturerModelName,\r\n    SpacingBetweenSlices: image0.SpacingBetweenSlices,\r\n    displaySetInstanceUID,\r\n  };\r\n\r\n  return { viewportData, activeDisplaySetData };\r\n}\r\n\r\nfunction _onDoubleClick() {\r\n  const cancelActiveManipulatorsForElement = cornerstoneTools.getModule(\r\n    'manipulatorState'\r\n  ).setters.cancelActiveManipulatorsForElement;\r\n  const enabledElements = cornerstoneTools.store.state.enabledElements;\r\n  enabledElements.forEach(element => {\r\n    cancelActiveManipulatorsForElement(element);\r\n  });\r\n}\r\n\r\nexport default OHIFCornerstoneSRViewport;\r\n"],"names":["draw","importInternal","drawJoinedLines","drawCircle","drawEllipse","drawHandles","drawArrow","getNewContext","BaseTool","drawLinkedTextBox","DICOMSRDisplayTool","props","defaultProps","mixins","name","TOOL_NAMES","initialProps","Object","assign","_module","cornerstoneTools","getModule","id","evt","eventData","detail","element","module","this","toolState","getToolState","trackingUniqueIdentifiersForElement","getters","activeIndex","trackingUniqueIdentifiers","activeTrackingUniqueIdentifier","filteredToolData","data","filter","td","includes","TrackingUniqueIdentifier","i","renderableData","labels","color","toolColors","options","lineWidth","handleRadius","keys","forEach","GraphicType","renderableDataForGraphicType","SCOORD_TYPES","renderPoint","renderMultipoint","renderPolyLine","renderCircle","renderEllipse","context","canvasContext","canvas","handles","textBox","active","hasMoved","movesIndependently","drawnIndependently","allowedOutsideImage","hasBoundingBox","anchorPoints","points","image","rows","xOffset","columns","yOffset","point","push","x","y","circle","center","radius","ellipse","corner1","corner2","halfWidth","Math","abs","halfHeight","_getTextBoxAnchorPointsForRenderableData","bottomRight","max","map","text","labelLength","min","length","lines","labelEntry","_labelToShorthand","label","value","_getTextBoxLinesFromLabels","textBoxAnchorPoints","handleStartCanvas","pixelToCanvas","handleEndCanvas","SHORT_HAND_MAP","AREA","Length","CORNERSTONEFREETEXT","shortHand","undefined","ViewportOverlay","imageId","scale","windowWidth","windowCenter","imageIndex","stackSize","activeTools","overlay","isZoomActive","isWwwcActive","instanceNumber","cornerstone","className","classnames","toFixed","propTypes","PropTypes","formatDate","utils","scrollToIndex","OHIF","StackManager","guid","OHIFCornerstoneSRViewport","trackedMeasurements","sendTrackedMeasurementsEvent","children","dataSource","displaySet","viewportIndex","servicesManager","extensionManager","services","DisplaySetService","ToolBarService","MeasurementService","useViewportGrid","viewportGrid","viewportGridService","useViewportDialog","viewportDialogState","useState","measurementSelected","setMeasurementSelected","measurementCount","setMeasurementCount","viewportData","setViewportData","activeDisplaySetData","setActiveDisplaySetData","setElement","isHydrated","setIsHydrated","viewports","activeViewportIndex","useEffect","onDisplaySetsRemovedSubscription","subscribe","EVENTS","DISPLAY_SETS_REMOVED","displaySetInstanceUIDs","activeViewport","displaySetInstanceUID","setDisplaysetForViewport","unsubscribe","registeredExtensionIds","contextModule","getModuleEntry","useContext","isLocked","trackedSeries","isLoaded","load","setTrackingUniqueIdentifiersForElement","useCallback","targetElement","measurements","setters","measurement","numMeasurements","updateViewport","newMeasurementSelected","StudyInstanceUID","sopClassUids","console","warn","_getViewportAndActiveDisplaySetData","then","stack","currentImageIdIndex","findIndex","vp","childrenWithProps","imageIds","child","index","React","key","Modality","PatientID","PatientName","PatientSex","PatientAge","SliceThickness","ManufacturerModelName","StudyDate","SeriesDescription","SpacingBetweenSlices","SeriesInstanceUID","SeriesNumber","_viewportLabels","onDoubleClick","stopPropagation","preventDefault","onPillClick","onSeriesChange","direction","studyData","useAltStyling","isTracked","isRehydratable","studyDate","currentSeries","seriesDescription","modality","patientInformation","patientName","Alphabetic","patientSex","patientAge","MRN","thickness","spacing","scanner","onElementEnabled","toolAlias","primaryToolId","state","_getToolAlias","configuration","renderDashed","pointers","mouseButtonMask","OHIFCornerstoneEnabledElementEvent","CustomEvent","enabledElement","document","dispatchEvent","imageIdIndex","isActive","isStackPrefetchEnabled","isPlaying","frameRate","isOverlayVisible","resizeRefreshRateMs","viewportOverlayComponent","getActiveTools","message","type","actions","onSubmit","onOutsideClick","_getCornerstoneStack","getDisplaySetByUID","storedStack","findOrCreateStack","activeTrackingUniqueIdentifierForElement","referencedDisplaySet","image0","images","customProps"],"sourceRoot":""}